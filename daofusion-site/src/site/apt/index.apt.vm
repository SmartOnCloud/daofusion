 ----
 Welcome to ${df-fullName}
 ----
 Vojtech Szocs
 ----
 24 January 2009
 ----

Welcome to ${df-fullName}

  <${df-fullName}> is a lightweight yet comprehensive and extensible Java based {{{http://java.sun.com/blueprints/corej2eepatterns/Patterns/DataAccessObject.html} Data Access Object}}
  (DAO) pattern implementation built on top of {{{http://java.sun.com/javaee/technologies/persistence.jsp} Java Persistence API}} (JPA) and {{{http://www.hibernate.org/} Hibernate}}.
  
  You could think of ${df-fullName} as a solid foundation for your own DAO layers, doing most of the usual heavy lifting for you and providing support for common DAO-related tasks,
  such as:
  
  * {{{./reference/entity-model.html} Persistent entity model}}
  
  Model your business domain using a standard persistent entity model with out-of-the-box default persistent entity implementations.
  
  * {{{./reference/core-dao-classes.html} Core DAO classes}}
  
  Build your DAO layer by extending standard persistent entity DAO interfaces / abstract implementations which already provide most of the usual DAO functionality.
  
  * {{{./reference/entity-criteria-api.html} Persistent entity criteria API}}
  
  Construct persistent entity criteria with advanced filtering, sorting and paging capabilities and pass them to DAO methods to query for desired results.
  
  * {{{./reference/cto-pattern.html} Criteria transfer object pattern}}
  
  Use the criteria transfer object (CTO) pattern to construct client-side versions of persistent entity criteria instances and pass them through the chosen communication mechanism
  to the remote server-side component, employing a CTO converter for seamless CTO-to-criteria transformation.
  
  []
  
  In addition to all of that, ${df-fullName} provides an out-of-the-box {{{./reference/integration-tests.html} integration test support}} based on {{{http://www.junit.org/} JUnit}}
  and {{{http://static.springframework.org/spring/docs/2.5.x/reference/index.html} Spring}}'s {{{http://static.springframework.org/spring/docs/2.5.x/reference/testing.html#testcontext-framework} TestContext framework}}.
  Integration tests interact with the chosen database instance and make sure that all standard DAO implementations are properly and thoroughly tested using a non-trivial sample domain model.
  
  ${df-fullName} is currently integration-tested against the following databases:
  
  * In-memory databases
  
    * {{{http://www.h2database.com/} H2}}
    
    * {{{http://hsqldb.org/} HSQL}}
  
  []
  
  * Mid-scale databases
  
    * {{{http://www.mysql.com/} MySQL}}
    
    * {{{http://www.postgresql.org/} PostgreSQL}}
  
  []
  
  * Enterprise databases
  
    * {{{http://www.ibm.com/db2} DB2}}
    
    * {{{http://www.oracle.com/technology/products/database/oracle10g/index.html} Oracle 10g}}
    
    * {{{http://en.wikipedia.org/wiki/Microsoft_SQL_Server} MS SQL Server 2000}}
  
  []
  
  And if that weren't enough, you are always free to write your own custom integration tests for the database of your choice using the standard integration test infrastructure.
