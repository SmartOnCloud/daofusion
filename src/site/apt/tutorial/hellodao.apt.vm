 ----
 Hello, DAO! tutorial
 ----
 Vojtech Szocs
 ----
 25 May 2009
 ----

Hello, DAO! tutorial
  
  We have prepared a sample application to help developers get familiar with ${df} concepts using popular web application technologies and tools:
  
  * {{{http://java.sun.com/javaee/5/docs/tutorial/doc/bnafd.html} Java Servlet API}} (Java EE)
  
  * {{{http://code.google.com/webtoolkit/} Google Web Toolkit}} (presentation logic and RPC support) / {{{http://code.google.com/p/smartgwt/} SmartGWT}} (fancy UI widgets)
  
  * {{{http://maven.apache.org/} Maven}} (overall project build) / {{{http://ant.apache.org/} Ant}} (GWT module compilation)
  
  []
  
  Hey, but where is {{{http://static.springframework.org/spring/docs/2.5.x/reference/index.html} Spring}} ? The truth is, our sample application doesn't use Spring at all during its runtime. Why?
  
  * to prove ${df} usability in unmanaged application environments (no Spring or EJB container)
  
  * to think more deeply about concepts such as the <Open EntityManager In View> pattern
  
  * to make things a bit more simple
  
Instructions
  
  First, check out <Hello, DAO!> sources from the trunk:
  
+--+
http://daofusion.googlecode.com/svn/trunk/samples/hello-dao/
+--+
  
  If you use {{{http://www.eclipse.org/} Eclipse IDE}}, you can generate Eclipse project files via "<<<mvn eclipse:eclipse>>>".
  
  Next, start the application via "<<<mvn jetty:run>>>". It can take some time though since Maven needs to look for required dependencies. Please note that <Hello, DAO!> uses
  an embedded {{{http://www.h2database.com/} H2}} database instance running <<in the same JVM>> as the application itself.
  
  Once you see something like <<<[INFO] Started Jetty Server>>> on the console, you can launch the application by pointing your browser to:
  
+--+
http://localhost:8080/hellodao/init
+--+
  
  There should be enough Javadocs / comments hanging around in source files to figure out how things work. We recommend to start with <<<WEB-INF/web.xml>>> first and explore
  the service and DAO layer after.
  
Step-by-step tutorial
  
  We are currently working on a step-by-step tutorial for <Hello, DAO!> which should demonstrate basic steps when building DAO layers with ${df}.
